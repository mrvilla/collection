"use strict";
/**
 * Imports
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Helpers
var extend_1 = require("@veams/helpers/lib/object/extend");
var is_touch_1 = require("@veams/helpers/lib/detection/is-touch");
// Polyfill
require("./utils/polyfills/custom-event");
// Plugin System
var use_1 = require("./plugins/use");
// Plugin
var helpers_1 = require("./plugins/helpers");
// Events
var events_1 = require("./utils/events");
/**
 * Default values
 */
var defaultOptions = {
    namespace: 'Veams',
    addToGlobal: false
};
/**
 * Represents VeamsCore.
 * @module VeamsCore
 *
 * @author Sebastian Fitzner
 */
var Core = /** @class */ (function () {
    /**
     * Constructor
     */
    function Core(opts) {
        this._initialized = false;
        this._options = defaultOptions;
        this.base = {
            name: 'Veams',
            version: '1.0.2'
        };
        this.use = use_1.default.bind(this);
        this.Plugins = {};
        this.EVENTS = events_1.default;
        this.helpers = {};
        this.detections = {
            width: window.innerWidth,
            height: window.innerHeight
        };
        this.setup(opts);
    }
    Object.defineProperty(Core.prototype, "version", {
        get: function () {
            return this._version;
        },
        /**
         * Getter & Setter
         */
        set: function (version) {
            this._version = version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "initialized", {
        get: function () {
            return this._initialized;
        },
        set: function (bool) {
            this._initialized = bool;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (options) {
            this._options = extend_1.default(this.options, options || defaultOptions);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Setup Veams core
     * @param opts
     */
    Core.prototype.setup = function (opts) {
        this.use(helpers_1.default);
        this.detections = extend_1.default({
            touch: is_touch_1.default()
        }, this.detections);
        this.options = opts;
    };
    /**
     * Initialize veams core
     * @param opts Options
     */
    Core.prototype.initialize = function (opts) {
        if (opts === void 0) { opts = this.options; }
        if (this.initialized === true) {
            return console.info('@veams/core :: You already initialized Veams!');
        }
        /**
         * Set global options on initialize
         */
        this.options = opts;
        if (this.options.addToGlobal) {
            if (window && !window[this.options.namespace]) {
                window[this.options.namespace] = this || {};
            }
        }
        this.initialized = true;
    };
    /**
     * On initialize lifecyle hook
     *
     * @param cb
     */
    Core.prototype.onInitialize = function (cb) {
        if (!cb || typeof cb !== 'function') {
            console.log('@veams/core :: Callback is not a function!');
            return;
        }
        if (this.initialized === false) {
            this.initialize();
        }
        cb();
    };
    /**
     * After initialize lifecycle hook
     *
     * @param cb
     */
    Core.prototype.afterInitialize = function (cb) {
        if (!cb || typeof cb !== 'function') {
            console.log('@veams/core :: Callback is not a function!');
            return;
        }
        cb();
    };
    /**
     * On DOM ready lifecycle hook
     *
     * @param cb
     */
    Core.prototype.onDOMReady = function (cb) {
        if (typeof cb !== 'function') {
            console.log('@veams/core :: Callback is not a function!');
            return;
        }
        document.addEventListener('DOMContentLoaded', cb);
    };
    return Core;
}());
exports.default = Core;
//# sourceMappingURL=core.js.map