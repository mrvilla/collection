export declare class EventElement {
    /**
     * VeamsQuery DOM wrapper object
     *
     * @param {Object} selector - selector (element)
     */
    constructor(selector: any);
    /**
     * Attach an event handler function for one or more events to the selected elements
     *
     * @param {String} eventNames - name(s) of event(s) to be registered for matched set of elements
     * @param {String} [selector] - selector string to filter descendants of selected elements triggering the event
     * @param {Function} handler - event handler function
     * @param {Boolean} [useCapture] - dispatch event to registered listeners before dispatching it to event target
     * @return {Object} - VeamsQuery object
     */
    on(eventNames: any, selector: any, handler: any, useCapture: any): this;
    /**
     * Detach an event handler for one or more events from the selected elements
     *
     * @param {String} eventNames - name(s) of event(s) to be unregistered for matched set of elements
     * @param {String} [selector] - selector string to filter descendants of selected elements triggering the event
     * @param {Function} [handler] - event handler
     * @return {Object} - VeamsQuery object
     */
    off(eventNames: any, selector: any, handler: any): this;
}
export default function (selector: any): EventElement;
